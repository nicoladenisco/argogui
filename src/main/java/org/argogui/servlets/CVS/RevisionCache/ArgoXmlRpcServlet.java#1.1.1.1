/* 
 *  Copyright (C) 2016 RAD-IMAGE s.r.l.
 * 
 *  Questo software è proprietà di RAD-IMAGE s.r.l.
 *  Tutti gli usi non esplicitimante autorizzati sono da 
 *  considerarsi tutelati ai sensi di legge.
 * 
 *  RAD-IMAGE s.r.l.
 *  Via San Giovanni, 1 - Contrada Belvedere
 *  San Nicola Manfredi (BN)
 * 
 *  Creato il 10 Febbraio 2016, 19:06:00
 */
package it.radimage.argo.servlets;

import it.radimage.argo.utils.TR;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Iterator;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.configuration.Configuration;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.turbine.util.TurbineException;
import org.apache.xmlrpc.XmlRpcServer;

/**
 * Interfaccia verso i servizi XML-RPC.
 * Il server XML-RPC ha una sua porta per le comunicazioni
 * fra l'application server ed altre applicazioni, ma per
 * utilizzare i servizi XML-RPC da Javascript è più opportuno
 * l'uso di questa servlet che consente un colloquio più diretto.
 * Le chiamate vengono comunque girate al servizio XmlRpcService
 * di Turbine, di conseguenza valgono gli stessi settaggi del
 * servizio e gli stessi handler esportati dal servizio.
 *
 * @author Nicola De Nisco
 */
public class ArgoXmlRpcServlet extends HttpServlet
{
  /** Logging */
  private static Log log = LogFactory.getLog(ArgoXmlRpcServlet.class);
  /** Gestore connessioni xmlrpc */
  protected XmlRpcServer server = new XmlRpcServer();

  @Override
  public void init()
     throws ServletException
  {
    super.init();

    Configuration conf = TR.getConfiguration("services.XmlRpcService.embedded");

    // Check if there are any handlers to register at startup
    for(Iterator keys = conf.getKeys("handler"); keys.hasNext();)
    {
      String handler = (String) keys.next();
      String handlerName = handler.substring(handler.indexOf('.') + 1);
      String handlerClass = conf.getString(handler);

      log.debug("Found Handler " + handler + " as " + handlerName + " / " + handlerClass);

      registerHandler(handlerName, handlerClass);
    }
  }

  /**
   * A helper method that tries to initialize a handler and register it.
   * The purpose is to check for all the exceptions that may occur in
   * dynamic class loading and throw an InitializationException on
   * error.
   *
   * @param handlerName The name the handler is registered under.
   * @param handlerClass The name of the class to use as a handler.
   * @exception TurbineException Couldn't instantiate handler.
   */
  public void registerHandler(String handlerName, String handlerClass)
     throws ServletException
  {
    try
    {
      Object handler = Class.forName(handlerClass).newInstance();
      server.addHandler(handlerName, handler);
    }
    catch(ThreadDeath | OutOfMemoryError t)
    {
      throw t;
    }
    catch(Throwable t)
    {
      throw new ServletException("Failed to instantiate " + handlerClass, t);
    }
  }

  /**
   * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
   * @param request servlet request
   * @param response servlet response
   * @throws ServletException if a servlet-specific error occurs
   * @throws IOException if an I/O error occurs
   */
  protected void processRequest(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException
  {
    byte[] result = server.execute(request.getInputStream());
    response.setContentType("text/xml");
    response.setContentLength(result.length);
    OutputStream out = response.getOutputStream();
    out.write(result);
    out.flush();
  }

  // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
  /**
   * Handles the HTTP <code>GET</code> method.
   * @param request servlet request
   * @param response servlet response
   * @throws ServletException if a servlet-specific error occurs
   * @throws IOException if an I/O error occurs
   */
  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException
  {
    processRequest(request, response);
  }

  /**
   * Handles the HTTP <code>POST</code> method.
   * @param request servlet request
   * @param response servlet response
   * @throws ServletException if a servlet-specific error occurs
   * @throws IOException if an I/O error occurs
   */
  @Override
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
     throws ServletException, IOException
  {
    processRequest(request, response);
  }

  /**
   * Returns a short description of the servlet.
   * @return a String containing servlet description
   */
  @Override
  public String getServletInfo()
  {
    return "Short description";
  }// </editor-fold>
}
