/* 
 *  Copyright (C) 2016 RAD-IMAGE s.r.l.
 * 
 *  Questo software è proprietà di RAD-IMAGE s.r.l.
 *  Tutti gli usi non esplicitimante autorizzati sono da 
 *  considerarsi tutelati ai sensi di legge.
 * 
 *  RAD-IMAGE s.r.l.
 *  Via San Giovanni, 1 - Contrada Belvedere
 *  San Nicola Manfredi (BN)
 * 
 *  Creato il 10 Febbraio 2016, 19:06:00
 */
package it.radimage.argo.services.localization;

import it.radimage.argo.om.utils.I;
import it.radimage.argo.om.utils.LocalizationMessageInterface;
import it.radimage.argo.utils.SU;
import java.io.InputStream;
import java.util.*;
import org.apache.commons.configuration.Configuration;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.turbine.Turbine;
import org.apache.turbine.services.InitializationException;
import org.apache.turbine.services.localization.LocaleTokenizer;
import org.apache.turbine.services.localization.TurbineLocalizationService;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;

/**
 * Servizio di localizzazione specializzato per PCSDM.
 * Estende le funzioni del serivzio localizzazione di Turbine,
 * aggiungendo anche la gestione dei files translation.xml.
 *
 * Le stringhe non presenti in translation.xml sono inviate alla log
 * con 'Unknow key [stringa non presente]'. Questo consente di
 * recuperarle velocemente con un codice tipo:
 *
 * <code>
 * cat services.log | perl -n -e'/Unknow key \[(.+)\]/ && print $1 . "\n"' | sort | uniq
 * </code>
 *
 * FILENOI18N
 * @author Nicola De Nisco
 */
public class ArgoLocalizationService extends TurbineLocalizationService
{
  /** Logging */
  private static Log log = LogFactory.getLog(ArgoLocalizationService.class);
  protected String xmlPath = null;
  protected Locale displayLocale = null;
  protected Set<String> defaultSet = new HashSet<>();
  protected Set<Locale> availableXmlLocale = new HashSet<>();
  protected Map<Locale, Map<String, String>> AllXmlMessageMap = new HashMap<>();
  public static final Locale ORIGIN_LOCALE = Locale.ITALY;

  @Override
  public void init()
     throws InitializationException
  {
    super.init();

    Configuration conf = Turbine.getConfiguration();
    xmlPath = conf.getString("locale.xmlFile", null);

    // carica tutti i messaggi di default
    if(xmlPath != null)
      caricaDefaultXML();

    // imposta locale da visualizzare di default
    Locale jvmDefault = Locale.getDefault();
    String sShowLang = conf.getString("locale.to.display.language", jvmDefault.getLanguage()).trim();
    String sShowCoun = conf.getString("locale.to.display.country", jvmDefault.getCountry()).trim();
    displayLocale = new Locale(sShowLang, sShowCoun);

    // imposta localizzatore nella I di om
    I.setInterface(new LocalizationMessageInterface()
    {
      @Override
      public String resolve(String defaultMessage)
      {
        return getString(null, null, defaultMessage);
      }
    });
  }

  /**
   * Carica messaggi DEFAULT dal file XML.
   * Verranno utilizzati per determinare le traduzioni da completare.
   */
  protected void caricaDefaultXML()
  {
    try (InputStream is = this.getClass().getResourceAsStream(xmlPath))
    {
      SAXBuilder builder = new SAXBuilder();
      Document doc = builder.build(is);

      Element root = doc.getRootElement();
      Element languages = root.getChild("LANGUAGES");
      List<Element> langList = languages.getChildren("LANG");

      availableXmlLocale.clear();
      for(Element e : langList)
      {
        String language = e.getAttributeValue("language");
        String country = e.getAttributeValue("country");
        availableXmlLocale.add(new Locale(language, country));
      }

      defaultSet.clear();
      Element messages = root.getChild("MESSAGES");
      List<Element> msgList = messages.getChildren("MSG");
      for(Element e : msgList)
      {
        String defmsg = e.getChildTextTrim("DEFAULT");
        if(!StringUtils.isEmpty(defmsg))
          if(!defaultSet.add(StringUtils.deleteWhitespace(defmsg)))
            log.warn("key [" + defmsg + "] duplicated");
      }

      log.debug("Caricati " + defaultSet.size() + " messaggi.");
    }
    catch(Exception e)
    {
      log.error("Error loading localized XML string.", e);
    }
  }

  /**
   * Carica mappa messaggi/traduzioni per la locale indicata dal file XML.
   * @param l locale richiesta
   * @return mappa relativa (può essere vuota ma non è mai nulla)
   */
  protected Map<String, String> caricaMessaggiXML(Locale l)
  {
    Map<String, String> msgMap;

    if((msgMap = AllXmlMessageMap.get(l)) != null)
      return msgMap;

    msgMap = new HashMap<String, String>();

    try (InputStream is = this.getClass().getResourceAsStream(xmlPath))
    {
      SAXBuilder builder = new SAXBuilder();
      Document doc = builder.build(is);

      Element root = doc.getRootElement();
      Element languages = root.getChild("LANGUAGES");
      List<Element> langList = languages.getChildren("LANG");
      Element choosed = null;

      for(Element e : langList)
      {
        String language = e.getAttributeValue("language");
        String country = e.getAttributeValue("country");

        // se la lingua corrisponde è un candidato valido (il primo nell'ordine)
        if(choosed == null && language != null && language.equalsIgnoreCase(l.getLanguage()))
          choosed = e;

        // se anche la nazione corrisponde allora è perfetto
        if(country != null && country.equalsIgnoreCase(l.getCountry()))
          break;
      }

      // carica i messaggi per la locale individuata
      if(choosed != null)
      {
        String key = choosed.getAttributeValue("key");
        String alt = choosed.getAttributeValue("alternate");
        boolean isOkAlt = SU.isOkStr(alt);

        if(!key.equals("DEFAULT"))
        {
          Element messages = root.getChild("MESSAGES");
          List<Element> msgList = messages.getChildren("MSG");
          for(Element e : msgList)
          {
            String defmsg = e.getChildTextTrim("DEFAULT");
            String locmsg = e.getChildTextTrim(key);

            if(isOkAlt && locmsg.isEmpty())
              locmsg = e.getChildTextTrim(alt);

            // nota: la chiave è senza spazi per evitare incoerenze di formattazione
            if(!StringUtils.isEmpty(locmsg))
              msgMap.put(StringUtils.deleteWhitespace(defmsg), locmsg);
          }
        }
      }

      // carica i messaggi di default: verranno utilizzati per determinare le traduzioni da completare
      if(defaultSet.isEmpty())
      {
        Element messages = root.getChild("MESSAGES");
        List<Element> msgList = messages.getChildren("MSG");
        for(Element e : msgList)
        {
          String defmsg = e.getChildTextTrim("DEFAULT");
          if(!StringUtils.isEmpty(defmsg))
            defaultSet.add(defmsg);
        }

        log.debug("Caricati " + defaultSet.size() + " messaggi.");
      }
    }
    catch(Exception e)
    {
      log.error("Error loading localized XML string.", e);
    }

    AllXmlMessageMap.put(l, msgMap);
    return msgMap;
  }

  @Override
  public String getString(String bundleName, Locale locale, String key)
  {
    String value;

    if(locale == null)
    {
      // se locale è nullo si intende quello di default
      locale = displayLocale;
    }

    // aggiusta eventuale bundle name al default se null
    bundleName = (StringUtils.isEmpty(bundleName) ? getDefaultBundleName() : bundleName.trim());

    if(xmlPath != null)
    {
      // nota: la chiave è senza spazi per evitare incoerenze di formattazione
      String mapKey = StringUtils.deleteWhitespace(key);

      if(defaultSet.contains(mapKey))
      {
        // se la locale richiesta è it_IT la stringa si intende già tradotta
        if(locale.equals(ORIGIN_LOCALE))
          return key;

        // cerca prima nelle traduzioni xml
        Map<String, String> msgMap = caricaMessaggiXML(locale);
        if((value = msgMap.get(mapKey)) != null)
          return value;
      }
      else
      {
        log.info("Unknow key [" + key + "]");
      }
    }

    // Look for text in requested bundle.
    ResourceBundle rb = getBundle(bundleName, locale);
    if((value = getStringOrNull(rb, key)) != null)
      return value;

    //log.debug("Missing localization for [" + key + "] " + locale);
    // Look for text in list of default bundles.
    String[] bNames = getBundleNames();
    if(bNames.length > 1)
    {
      for(int i = 0; i < bNames.length; i++)
      {
        String bn = bNames[i];
        if(!bn.equals(bundleName))
        {
          rb = getBundle(bn, locale);
          if((value = getStringOrNull(rb, key)) != null)
            return value;
        }
      }
    }

    return key;
  }

  /**
   * Ritorna la locale in base all'header del browser.
   * Verifica fra le locali supportate, ovvero quelle indicate nel file XML,
   * e ritorna quella più attinente.
   * @param stringa header del browser
   * @return la locale adatta all'utente
   */
  @Override
  public Locale getLocale(String header)
  {
    if(!StringUtils.isEmpty(header))
    {
      Locale choosed = null;
      LocaleTokenizer tok = new LocaleTokenizer(header);
      if(tok.hasNext())
      {
        Locale l = (Locale) tok.next();

        // match language e country: ottimo ritorniamo subito
        if(availableXmlLocale.contains(l))
          return l;

        // verifica math del solo language: risultato accettabile
        if(choosed == null)
        {
          for(Locale al : availableXmlLocale)
          {
            if(SU.isEqu(l.getLanguage(), al.getLanguage()))
              choosed = l;
          }
        }
      }

      // se trovato match almeno di language torna questo
      if(choosed != null)
        return choosed;
    }

    // nessuna delle lingue richieste è supportata: ritorna quella impostata a setup
    return displayLocale;
  }
}
