/*
 *  Copyright (C) 2016 RAD-IMAGE s.r.l.
 *
 *  Questo software è proprietà di RAD-IMAGE s.r.l.
 *  Tutti gli usi non esplicitimante autorizzati sono da
 *  considerarsi tutelati ai sensi di legge.
 *
 *  RAD-IMAGE s.r.l.
 *  Via San Giovanni, 1 - Contrada Belvedere
 *  San Nicola Manfredi (BN)
 *
 *  Creato il 10 Febbraio 2016, 19:06:00
 */
package it.radimage.argo.services;

/**
 * Title: Newstar
 * Description:
 * Copyright: Copyright (c) 2002
 * Company: Italsystems s.r.l.
 * @author Nicola De Nisco
 * @version 1.0
 */
import it.radimage.argo.om.AlignDatabase;
import java.io.*;
import java.util.Iterator;
import java.util.List;

import it.radimage.argo.services.allarmi.ServAllarmi;
import it.radimage.argo.om.utils.*;

import org.apache.turbine.*;
import org.apache.turbine.services.*;
import org.apache.turbine.services.servlet.*;
import org.apache.commons.logging.*;
import org.apache.commons.configuration.Configuration;
import org.apache.turbine.om.security.Group;
import org.apache.turbine.om.security.Permission;
import org.apache.turbine.om.security.Role;
import org.apache.turbine.om.security.User;
import org.apache.turbine.services.security.TurbineSecurity;
import org.apache.turbine.util.security.PermissionSet;
import org.commonlib.utils.CommonFileUtils;
import org.commonlib.utils.JavaLoggingToCommonLoggingRedirector;

import org.commonlib.utils.OsIdent;
import org.commonlib.utils.StringOper;
import it.radimage.argo.services.security.SEC;
import it.radimage.argo.services.security.ArgoSecurity;
import it.radimage.argo.utils.SU;
import java.sql.Connection;
import java.util.ArrayList;
import org.apache.torque.Torque;

/**
 * Classe base di tutti i servizi di Newstar.
 * I servizi sono configurati nel file newstar.properties
 * come gli altri servizi di turbine.
 */
abstract public class ArgoBaseService extends BaseService implements ArgoService
{
  /** Logging */
  private static Log log = LogFactory.getLog(ArgoBaseService.class);
  /** semaforo per l'inizializzazione */
  private static final Object semaforoInit = new Object();
  /** Variabili globali per tutti i servizi */
  protected static ServAllarmi allarm = null;
  protected static int aziendaId = 0;
  protected static String aziendaNome = null;
  protected static String server = null, address = null;
  private static ArrayList<InfoSetupInterface> arInfoSetup = new ArrayList<InfoSetupInterface>();
  /** path di riferimento */
  private static String pathWork = null;
  private static String pathWorkTmp = null;
  private static String pathWorkSpool = null;
  private static String pathWorkCache = null;
  private static String pathWorkIso = null;
  private static String pathWorkGraph = null;
  private static String pathWorkDocs = null;
  private static String pathConf = null;
  private static String pathConfSchemas = null;
  private static String pathConfSetup = null;
  private static String pathConfStylesheets = null;
  private static String pathConfReports = null;
  private static String pathConfCert = null;
  private static String pathPgsqlBin = null;
  private static String pathDicomBin = null;

  /**
   * Ritorna la path completa di un eseguibile
   * del toolkit DICOM utlizzando le path di setup.
   * @param pgm programma da localizzare
   * @return path completa
   */
  public String getDicomPgm(String pgm)
  {
    String sPath = normalizePath(pathDicomBin + "/" + pgm);
    return normalizeWindowsExecutable(sPath);
  }

//  /**
//   * Ritorna la path completa di un eseguibile
//   * per la masterizzazione di CD/DVD.
//   * @param pgm programma da localizzare
//   * @return path completa
//   */
//  public String getCdrecordPgm(String pgm)
//  {
//    String sPath = normalizePath(pathCdrecordBin + "/" + pgm);
//    return normalizeWindowsExecutable(sPath);
//  }
  /**
   * Ritorna la path completa di un eseguibile
   * di servizio di PostgreSQL.
   * @param pgm programma da localizzare
   * @return path completa
   */
  @Override
  public String getPgsqlPgm(String pgm)
  {
    String sPath = normalizePath(pathPgsqlBin + "/" + pgm);
    return normalizeWindowsExecutable(sPath);
  }

  /**
   * Ritorna la path completa di un eseguibile
   * del toolkit DICOM utlizzando le path di setup.
   * @param pgm programma da localizzare
   * @return oggetto File con path completa
   */
  public File getDicomPgmFile(String pgm)
  {
    return new File(getDicomPgm(pgm));
  }

//  /**
//   * Ritorna la path completa di un eseguibile
//   * per la masterizzazione di CD/DVD.
//   * @param pgm programma da localizzare
//   * @return oggetto File con path completa
//   */
//  public File getCdrecordPgmFile(String pgm)
//  {
//    return new File(getCdrecordPgm(pgm));
//  }
  /**
   * Ritorna la path completa di un eseguibile
   * di servizio di PostgreSQL.
   * @param pgm programma da localizzare
   * @return oggetto File con path completa
   */
  @Override
  public File getPgsqlPgmFile(String pgm)
  {
    return new File(getPgsqlPgm(pgm));
  }

  protected String normalizeWindowsExecutable(String sPath)
  {
    // estrae la prima stringa per aggiungere il .exe sotto windows
    if(OsIdent.checkOStype() == OsIdent.OS_WINDOWS
       && !sPath.toLowerCase().contains(".exe"))
    {
      int pos = sPath.indexOf(' ');
      if(pos == -1)
        sPath += ".exe";
      else
        sPath = sPath.substring(0, pos) + ".exe" + sPath.substring(pos);
    }

    return sPath;
  }

  public File getWorkFile(String dirConf, String path)
  {
    return new File(dirConf, path);
  }

  public String getWorkPath(String dirConf, String path)
  {
    String fPath = dirConf + "/" + path;
    return normalizePath(fPath);
  }

  public File getConfigFile(String dirConf, String path)
  {
    return new File(getConfigPath(dirConf, path));
  }

  public String getConfigPath(String dirConf, String path)
  {
    String fPath = dirConf + "/" + path;
    return getRealPath(fPath);
  }

  /**
   * Ritorna la path effettiva di un file all'interno
   * della directory dell'applicazione web.
   * La path viene ritornata in modo consono alla piattaforma
   * di funzionamento (windows o Unix).
   * ES index.jsp -> /usr/local/tdk/webapps/newstar/index.jsp
   * @param path una path qualsiasi all'interno dell'applicazione web
   * @return path assoluta nel file system
   */
  @Override
  public String getRealPath(String path)
  {
    String rv = Turbine.getRealPath(path.replace('\\', '/'));
    return normalizePath(rv);
  }

  /**
   * Converte la path di ingresso con gli
   * opportuni separatori in modo che sia coerente con
   * la piattaforma ospite (windows o unix).
   * @param path
   * @return
   */
  public String normalizePath(String path)
  {
    String rv = path.replace('\\', '/');
    rv = StringOper.strReplace(rv, "//", "/");

    if(File.separatorChar == '/')
      return rv;
    else
      return rv.replace('/', File.separatorChar);
  }
  private static String strTurbineContext = null;

  /**
   * Ritorna la context path dell'applicazione.
   * (di solito /newstar/).
   * @return
   */
  @Override
  public String getTurbineContextPath()
  {
    if(strTurbineContext == null)
      strTurbineContext = TurbineServlet.getContextPath() + "/";

    return strTurbineContext;
  }

  /**
   * Effettua controlli sul sistema per evidenziare
   * situazioni non conformi al funzionamento di Newstar.
   * @throws Exception
   */
  protected void sanitySystem()
     throws Exception
  {
    // redirige il logger standard di Java all'interno di Log4j
    JavaLoggingToCommonLoggingRedirector.activate();

    // imposta il truststore di default
    ArgoTlsManager.getInstance().initTLScomunication();

    log.info("sanitySystem superato");
  }

  /**
   * Effettua controlli sull'ambiente java per evidenziare
   * situazioni non conformi al funzionamento di Newstar.
   * @throws Exception
   */
  protected void sanityJava()
     throws Exception
  {
    // controlla la presenza di java e javac nella path
    // di sistema: vengono utilizzati da sottoprogrammi
    // lanciati esternamente (tipo Jasper)

    boolean found = false;
    String path = System.getenv("PATH");
    String[] dirs = SU.split(path, File.pathSeparatorChar);
    for(int i = 0; i < dirs.length; i++)
    {
      log.debug("Test " + dirs[i] + " for java/javac");
      File fDir = new File(dirs[i]);
      if(!fDir.isDirectory())
        continue;

      File testJava = new File(fDir, "java");
      File testJavac = new File(fDir, "javac");
      if(testJava.exists() && testJavac.exists())
      {
        found = true;
        break;
      }

      File testJavaw = new File(fDir, "java.exe");
      File testJavacw = new File(fDir, "javac.exe");
      if(testJavaw.exists() && testJavacw.exists())
      {
        found = true;
        break;
      }
    }

    if(!found)
      die("I programmi java e/o javac non sono presenti nella path.");

    log.info("sanityJava superato");
  }

  /**
   * Verifica e regolarizza il database.
   * @throws Exception
   */
  protected void sanityDatabase()
     throws Exception
  {
    SanityOM.sanityDatabase();

    // esegue allineamento database automatico
    AlignDatabase ad = new AlignDatabase();
    File dirSql = getConfMainFile("sql");
    File pilot = new File(dirSql, "updpilot.xml");
    if(pilot.canRead() && dirSql.isDirectory())
    {
      ad.product = "argo";
      ad.dirScripts = new File(dirSql, "update");
      if(ad.dirScripts.isDirectory())
      {
        Connection con = null;
        try
        {
          con = Torque.getConnection();
          ad.setConnection(con);
          ad.readUpgradeStep();
          ad.parsingSqlAggiornamento(ad.anno, ad.settimana, pilot);
          if(ad.updated)
            ad.writeUpgradeStep(0, null);
        }
        finally
        {
          if(con != null)
            Torque.closeConnection(con);
        }
      }
    }
  }

  /**
   * Verifica le impostazioni di sicurezza di base.
   * L'utente turbine deve esistere ed avere id=0.
   * Il ruolo turbine_root deve esistere ad avere id=1.
   * @throws Exception
   */
  protected void sanitySecurity()
     throws Exception
  {
    User turbine = null;
    Role turbine_root = null;
    Group global_group = null;

    try
    {
      turbine = TurbineSecurity.getUser(ArgoSecurity.ADMIN_NAME);
    }
    catch(Exception e)
    {
    }

    if(turbine == null || SEC.getUserID(turbine) != 0)
      die("Grave errore di configurazione: l'utente " + ArgoSecurity.ADMIN_NAME
         + " deve esistere e obbligatoriamente avere l'ID = 0");

    try
    {
      turbine_root = TurbineSecurity.getRoleByName(ArgoSecurity.ADMIN_ROLE);
    }
    catch(Exception ex)
    {
    }

    if(turbine_root == null)
    {
      turbine_root = TurbineSecurity.createRole(ArgoSecurity.ADMIN_ROLE);
      ASSERT(turbine_root != null, "turbine_root != null");
    }

    try
    {
      global_group = TurbineSecurity.getGlobalGroup();
    }
    catch(Exception e)
    {
    }

    if(global_group == null)
    {
      global_group = TurbineSecurity.createGroup(Group.GLOBAL_GROUP_NAME);
      ASSERT(global_group != null, "global_group != null");
    }

    // da tutti i permessi a turbine_root
    PermissionSet allPerm = TurbineSecurity.getAllPermissions();
    for(Iterator itPerm = allPerm.iterator(); itPerm.hasNext();)
    {
      try
      {
        TurbineSecurity.grant(turbine_root, (Permission) itPerm.next());
      }
      catch(Exception e)
      {
        // l'eccezione viene ignorata: l'associazione può già esistere
      }
    }

    try
    {
      User sviluppo = TurbineSecurity.getUser(ArgoSecurity.SVILUPPO_NAME);
      TurbineSecurity.grant(sviluppo, global_group, turbine_root);
    }
    catch(Exception e)
    {
      // l'eccezione viene ignorata: l'associazione può già esistere
    }

    try
    {
      User infomed = TurbineSecurity.getUser(ArgoSecurity.INFOMED_NAME);
      TurbineSecurity.grant(infomed, global_group, turbine_root);
    }
    catch(Exception e)
    {
      // l'eccezione viene ignorata: l'associazione può già esistere
    }
  }

  @Override
  final public void init()
     throws InitializationException
  {
    super.init();

    try
    {
      synchronized(semaforoInit)
      {
        if(allarm == null)
        {
          log.info("Attivo inizializzazione variabili statiche globali dei servizi.");
          allarm = (ServAllarmi) (getServiceBroker().getService(ServAllarmi.SERVICE_NAME));
          SERVICE.setService(this);

          try
          {
            localInit();

            sanitySystem();
            sanityJava();
            sanityDatabase();
            sanitySecurity();
          }
          catch(Exception e)
          {
            String s = "ERRORE FATALE INIZIALIZZAZIONE ARGO (esecuzione compromessa/non possibile): "
               + e.getMessage();
            log.error(s, e);
            allarm.fatal("ARGO", "Init", s, 0);
            setInit(false);
            return;
          }
        }
      }

      // inizializzazione specifica del servizio derivato
      log.debug("Avvio del servizio " + getName());
      argoInit();
      setInit(true);

      // se il servizio implementa l'interfaccia dati setup lo aggiunge al relativo array
      if(this instanceof InfoSetupInterface)
        arInfoSetup.add((InfoSetupInterface) this);

      log.debug("Servizio " + getName() + " avviato con successo.");
    }
    catch(Throwable e)
    {
      String s = "Errore nell'avvio del servizio " + getName() + ": " + e.getMessage();
      log.error(s, e);
      allarm.fatal(getName(), "Init", s, 0);
      setInit(false);
    }
  }

  /**
   * Inizializzazione servizio derivato.
   * @throws Exception
   */
  public abstract void argoInit()
     throws Exception;

  /**
   * Inizializzazione una tantum delle variabili statiche
   * e quindi generali per tutti i servizi.
   * @param cfg
   * @throws java.lang.Exception
   */
  protected void localInit()
     throws Exception
  {
    Configuration cfg = Turbine.getConfiguration();
    log.info("Inizializzazione globale con contextPath " + strTurbineContext);

    aziendaId = cfg.getInt("azienda.id", 1);
    aziendaNome = cfg.getString("azienda.nome", "Informatica medica s.r.l.");

    server = cfg.getString("server.name", "localhost");
    address = cfg.getString("server.address", "127.0.0.1");

    pathWork = TV(cfg.getString("path.work", "/var/argo"));
    pathWorkTmp = TV(cfg.getString("path.work.tmp", "/var/argo/tmp"));
    pathWorkSpool = TV(cfg.getString("path.work.spool", "/var/argo/spool"));
    pathWorkCache = TV(cfg.getString("path.work.cache", "/var/argo/cache"));
    pathWorkIso = TV(cfg.getString("path.work.iso", "/var/argo/iso"));
    pathWorkGraph = TV(cfg.getString("path.work.graph", "/var/argo/grafici"));
    pathWorkDocs = TV(cfg.getString("path.work.docs", "/var/argo/documenti"));

    makeTestDirWrite(pathWork);
    makeTestDirWrite(pathWorkTmp);
    makeTestDirWrite(pathWorkSpool);
    makeTestDirWrite(pathWorkCache);
    makeTestDirWrite(pathWorkIso);
    makeTestDirWrite(pathWorkGraph);
    makeTestDirWrite(pathWorkDocs);

    pathConf = "/WEB-INF/" + TV(cfg.getString("path.conf", "/conf"));
    pathConfSchemas = "/WEB-INF/" + TV(cfg.getString("path.conf.schemas", "/conf/schemas"));
    pathConfSetup = "/WEB-INF/" + TV(cfg.getString("path.conf.setup", "/conf/setup"));
    pathConfStylesheets = "/WEB-INF/" + TV(cfg.getString("path.conf.xls", "/conf/stylesheets"));
    pathConfReports = "/WEB-INF/" + TV(cfg.getString("path.conf.reports", "/conf/reports"));
    pathConfCert = "/WEB-INF/" + TV(cfg.getString("path.conf.certs", "/conf/cert"));

    makeTestDir(getRealPath(pathConf));
    makeTestDir(getRealPath(pathConfSchemas));
    makeTestDir(getRealPath(pathConfSetup));
    makeTestDir(getRealPath(pathConfStylesheets));
    makeTestDir(getRealPath(pathConfReports));
    makeTestDir(getRealPath(pathConfCert));

    pathPgsqlBin = TV(cfg.getString("path.pgsql.bin", "/usr/bin/"));
    pathDicomBin = TV(cfg.getString("path.dicom.bin", "/usr/local/dicom/bin/"));
  }

  /**
   * Controlla che la stringa in ingresso non contenga spazi.
   * @param input
   * @return
   * @throws java.lang.IllegalArgumentException
   */
  protected static String TV(String input)
     throws IllegalArgumentException
  {
    if(input.indexOf(' ') != -1)
      throw new IllegalArgumentException("La stringa '" + input + "' contiene spazi: non consentito.");
    return StringOper.strReplace(input, "//", "/");
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale di appoggio del sistema Argo.
   * (/var/argo per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkMainFile(String subFile)
  {
    return getGenericFile(pathWork, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale dei temporanei del sistema Argo.
   * (/var/argo/tmp per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkTmpFile(String subFile)
  {
    return getGenericFile(pathWorkTmp, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale di spool del sistema Argo.
   * (/var/argo/spool per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkSpoolFile(String subFile)
  {
    return getGenericFile(pathWorkSpool, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale della cache del sistema Argo.
   * (/var/argo/cache per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkCacheFile(String subFile)
  {
    return getGenericFile(pathWorkCache, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale delle iso prodotte del sistema Argo.
   * (/var/argo/iso per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkIsoFile(String subFile)
  {
    return getGenericFile(pathWorkIso, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale di store degli MPPS del sistema Argo.
   * (/var/argo/mpps per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkGraphFile(String subFile)
  {
    return getGenericFile(pathWorkGraph, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale dei documenti del sistema Argo.
   * (/var/argo/doc per UNIX).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getWorkDocsFile(String subFile)
  {
    return getGenericFile(pathWorkDocs, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale dei logs.
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getLogFile(String subFile)
  {
    return getGenericRealFile("/logs", subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * principale di configurazione del sistema Argo.
   * (/newstar/WEB-INF/conf per UNIX a partire dalla
   * directory di installazione dell'applicazione web).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getConfMainFile(String subFile)
  {
    return getGenericRealFile(pathConf, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * di configurazione degli schemi xml.
   * (/newstar/WEB-INF/conf/schemas per UNIX a partire dalla
   * directory di installazione dell'applicazione web).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getConfSchemasFile(String subFile)
  {
    return getGenericRealFile(pathConfSchemas, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * di configurazione del setup client.
   * (/newstar/WEB-INF/conf/setup per UNIX a partire dalla
   * directory di installazione dell'applicazione web).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getConfSetupFile(String subFile)
  {
    return getGenericRealFile(pathConfSetup, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * di configurazione dei file xls.
   * (/newstar/WEB-INF/conf/xls per UNIX a partire dalla
   * directory di installazione dell'applicazione web).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getConfXlsFile(String subFile)
  {
    return getGenericRealFile(pathConfStylesheets, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * di configurazione dei file di jreport.
   * (/newstar/WEB-INF/conf/reports per UNIX a partire dalla
   * directory di installazione dell'applicazione web).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getConfReportFile(String subFile)
  {
    return getGenericRealFile(pathConfReports, subFile);
  }

  /**
   * Ritorna un file ubicato nella directory
   * di configurazione dei certificati di sicurezza.
   * (/newstar/WEB-INF/conf/cert per UNIX a partire dalla
   * directory di installazione dell'applicazione web).
   * @param subFile nome del file SENZA path
   * @return collocazione completa nel file system
   */
  @Override
  public File getConfCertFile(String subFile)
  {
    return getGenericRealFile(pathConfCert, subFile);
  }

  protected File getGenericFile(String basePath, String subFile)
  {
    return subFile == null ? new File(basePath) : new File(basePath, subFile);
  }

  protected File getGenericRealFile(String basePath, String subFile)
  {
    return subFile == null ? new File(getRealPath(basePath))
              : new File(getRealPath(basePath), subFile);
  }

  protected void makeTestDir(String dir)
     throws Exception
  {
    File fDir = new File(dir);
    fDir.mkdirs();
    ASSERT_DIR(fDir);
  }

  protected void makeTestDirWrite(String dir)
     throws Exception
  {
    File fDir = new File(dir);
    fDir.mkdirs();
    ASSERT_DIR_WRITE(fDir);
  }

  /**
   * Ritorna il nome del server canonico
   * dell'istanza di Newstar in esecuzione.
   * @return
   */
  @Override
  public String getCanonicalServerName()
  {
    return server;
  }

  /**
   * Ritorna l'indirizzo TCP/IP principale
   * dell'istanza di Newstar in esecuzione.
   * @return
   */
  @Override
  public String getCanonicalServerAddress()
  {
    return address;
  }

  /**
   * Data una url relativa torna l'url completa a seconda dell'ambiente.
   * La stringa si riferisce a una risorsa JSP
   * ES url=jsmia.jsp -> http://localhost:8080/src/jsmia.jsp
   * oppure http://mio.server.it:8080/miaapp/servlet/miaapp/template/jsmia.jsp
   */
  @Override
  public String getServerUrlJSP(String url)
  {
    if(url.startsWith("/"))
      url = url.substring(1);

    return getTurbineContextPath() + "pgm/template/" + url;
  }

  /**
   * Data una url relativa torna l'url completa a seconda dell'ambiente.
   * La stringa si riferisce a una risorsa qualsiasi riferita alla path
   * dell'applicazione
   * ES url=img.gif -> http://localhost:8080/img.gif
   * oppure http://mio.server.it:8080/miaapp/img.gif
   */
  @Override
  public String getServerUrlGeneric(String url)
  {
    if(url.startsWith("/"))
      url = url.substring(1);

    return getTurbineContextPath() + url;
  }

  ///////////////////////////////////////////////////////////////////////////
  // funzioni di utilita'
  @Override
  public void ASSERT(boolean test, String cause)
     throws Exception
  {
    if(!test)
    {
      String mess = "ASSERT failed: " + cause;
      log.error(mess);
      throw new ArgoServiceException(mess);
    }
  }

  /**
   * Verifica che il file esista.
   * @param toTest
   * @throws java.lang.Exception
   */
  public void ASSERT_FILE(File toTest)
     throws Exception
  {
    if(!(toTest.exists() && toTest.isFile()))
    {
      String mess = "ASSERT_FILE failed: il file " + toTest.getAbsolutePath()
         + " non esiste.";
      log.debug(mess);
      throw new ArgoServiceException(mess);
    }
  }

  /**
   * Verifica che la directory esista.
   * @param toTest
   * @throws java.lang.Exception
   */
  public void ASSERT_DIR(File toTest)
     throws Exception
  {
    if(!(toTest.exists() && toTest.isDirectory()))
    {
      String mess = "ASSERT_DIR failed: la directory " + toTest.getAbsolutePath()
         + " non esiste.";
      log.debug(mess);
      throw new ArgoServiceException(mess);
    }
  }

  /**
   * Verifica che la directory esista e sia
   * possibile creare files al suo interno.
   * @param toTest
   * @throws java.lang.Exception
   */
  public void ASSERT_DIR_WRITE(File toTest)
     throws Exception
  {
    toTest.mkdirs();
    if(!(toTest.exists() && toTest.isDirectory() && CommonFileUtils.checkDirectoryWritable(toTest)))
    {
      String mess = "ASSERT_DIR_WRITE failed: la directory " + toTest.getAbsolutePath()
         + " non esiste o non e' scrivibile.";
      log.debug(mess);
      throw new ArgoServiceException(mess);
    }
  }

  @Override
  public void TRACE(String mess)
  {
    log.debug(mess);
  }

  @Override
  public void die(String causa)
     throws Exception
  {
    throw new ArgoServiceException(causa);
  }

  public static List<InfoSetupInterface> getInfoSetup()
  {
    return arInfoSetup;
  }
}
