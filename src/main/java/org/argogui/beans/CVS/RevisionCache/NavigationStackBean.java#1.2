/*
 *  Copyright (C) 2016 RAD-IMAGE s.r.l.
 *
 *  Questo software è proprietà di RAD-IMAGE s.r.l.
 *  Tutti gli usi non esplicitimante autorizzati sono da
 *  considerarsi tutelati ai sensi di legge.
 *
 *  RAD-IMAGE s.r.l.
 *  Via San Giovanni, 1 - Contrada Belvedere
 *  San Nicola Manfredi (BN)
 *
 *  Creato il 10 Febbraio 2016, 19:06:00
 */
package it.radimage.argo.beans;

import it.radimage.argo.utils.ArgoRunData;
import it.radimage.argo.utils.SU;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;

/**
 * Stack per la navigazione fra pagine.
 *
 * @author Nicola De Nisco
 */
final public class NavigationStackBean extends ArgoBaseBean
{
  // costanti
  public static final String BEAN_KEY = "NavigationStackBean:BEAN_KEY";
  private Deque<String> uriStack = new ArrayDeque<>();

// <editor-fold defaultstate="collapsed" desc="Getter/Setter">
  // TODO: inserire qui i getter e setter
  // di eventuali proprietà del bean
// </editor-fold>
  private NavigationStackBean()
  {
  }

  @Override
  public void init(ArgoRunData data)
     throws Exception
  {
    super.init(data);
  }

  /**
   * Verifica se questo bean è ancora valido.
   * Questa funzione viene chiamata quando
   * il bean viene recuperato dalla sessione.
   * Se nella richiesta vi sono parametri che
   * ne inficiano l'utilizzo questo metodo
   * deve ritornare false e una nuova istanza
   * di questo bean verrà creata e inizializzata.
   * @param data dati della richiesta HTML
   * @return vero se il bean è valido
   */
  private boolean isValid(ArgoRunData data)
  {
    return true;
  }

  /**
   * Recupera dalla request la url di richiesta.
   * Le variabili 'action' e 'command' vengono rimosse.
   * @param request richiesta http
   * @return la uri completa della richiesta
   */
  public String getFullURL(HttpServletRequest request)
  {
    StringBuffer requestURL = request.getRequestURL();
    String queryString = request.getQueryString();

    if(queryString != null)
    {
      boolean first = true;
      Map<String, String> m = SU.string2Map(queryString, "&", true);
      for(Map.Entry<String, String> entrySet : m.entrySet())
      {
        String key = entrySet.getKey();
        String value = entrySet.getValue();
        if("action".equals(key))
          continue;
        if("command".equals(key))
          continue;

        requestURL.append(first ? '?' : '&').append(key).append('=').append(value);
        first = false;
      }
    }

    return requestURL.toString();
  }

  public boolean pushUri(ArgoRunData data)
  {
    String uri = getFullURL(data.getRequest());
    if(uri == null)
      return false;

    // non inserisce lo stesso indirizzo sulla cima dello stack
    if(uriStack.isEmpty() || !SU.isEqu(uri, uriStack.peek()))
      uriStack.push(uri);

    return true;
  }

  public boolean popUri(ArgoRunData data)
  {
    if(uriStack.isEmpty())
      return false;

    String uri = uriStack.pop();
    data.setStatusCode(302);
    data.setRedirectURI(uri);
    return true;
  }

  public boolean peekUri(ArgoRunData data)
  {
    if(uriStack.isEmpty())
      return false;

    String uri = uriStack.peek();
    data.setStatusCode(302);
    data.setRedirectURI(uri);
    return true;
  }

  public Iterator<String> uriIterator()
  {
    return uriStack.iterator();
  }

  public boolean isEmpty()
  {
    return uriStack.isEmpty();
  }

  public int size()
  {
    return uriStack.size();
  }

  public void push(String uri)
  {
    // non inserisce lo stesso indirizzo sulla cima dello stack
    if(uriStack.isEmpty() || !SU.isEqu(uri, uriStack.peek()))
      uriStack.push(uri);
  }

  public String pop()
  {
    return uriStack.pop();
  }

  public String peek()
  {
    return uriStack.peek();
  }

  public void clear()
  {
    uriStack.clear();
  }

  /**
   * Ritorna a url precedente.
   * Scarta la cima dello stack (pagina attualmente visualizzata)
   * e recupera senza rimuoverla la entry precedente che è la
   * pagina di ritorno. Effettua un redirect impostando i relativi
   * campi dell'oggetto rundata.
   * @param data
   * @return vero se il ritorno è stato attivato
   */
  public boolean return2(ArgoRunData data)
  {
    if(uriStack.size() <= 1)
      return false;

    // scarta la cima dello stack che è la uri attualmente visualizzata
    if(!uriStack.isEmpty())
      uriStack.pop();

    if(peekUri(data))
      return true;

    return false;
  }

  /**
   * Estrae il bean dalla sessione e ritorna a url precedete.
   * @param data
   * @return vero se il ritorno è stato attivato
   * @throws Exception
   */
  public static boolean ret2Session(ArgoRunData data)
     throws Exception
  {
    return getFromSession(data).return2(data);
  }

  /**
   * Recupera una istanza del bean della sessione. Se una istanza del bean è
   * presente in sessione viene ritornata dopo aver verificato che sia
   * compatibile con eventuali parametri passati con la richiesta. Se non
   * esiste o non è utilizzabile una nuova istanza viene creata.
   *
   * @param data parametri generali della richiesta
   * @return istanza del bean
   * @throws Exception
   */
  public static NavigationStackBean getFromSession(ArgoRunData data)
     throws Exception
  {
    NavigationStackBean bean = (NavigationStackBean) data.getSession().getAttribute(BEAN_KEY);

    if(bean == null || !bean.isValid(data))
    {
      removeFromSession(data);
      bean = new NavigationStackBean();
      bean.init(data);
      data.getSession().setAttribute(BEAN_KEY, bean);
    }

    return bean;
  }

  /**
   * Rimuove eventuale istanza di questo bean dalla sessione.
   *
   * @param data parametri generali della richiesta
   */
  public static void removeFromSession(ArgoRunData data)
  {
    data.getSession().removeAttribute(BEAN_KEY);
  }
}
