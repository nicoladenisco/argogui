package it.radimage.argo.beans;

import it.radimage.argo.utils.SU;
import java.io.*;
import java.net.InetAddress;
import java.sql.*;
import java.util.Enumeration;
import java.util.regex.Pattern;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspWriter;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.commonlib.exec.ExecHelper;
import org.commonlib.utils.*;
import org.rigel.db.SanityDatabaseUtils;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Bean per le JSP del master setup.
 * ATTENZIONE: questo bean non è utilizzato da Turbine e soci
 * quindi non estende ArgoBaseBean ne implementa la struttura
 * di AAAskelBean.
 *
 * @author Nicola De Nisco
 */
public class MasterSetupBean
{
  private ServletContext context;
  private PropertyManager pm = new PropertyManager();
  private SanityDatabaseUtils sdu = null;

  // misc
  public String contextPath, realContextPath;
  public File fileLocaliDir, sqlDir, outProperties, outRip, outTorque;
  public String profile = "WORKLIST", oss = "UNIX", prod = "ARGO",
     jdbcPath = "jdbc:postgresql:argo", jdbcUser = "argo", jdbcPass = "argo1";
  public String ehStdout, ehStderr, dboper = "CDB|STR|IND", pwdpos = "", dbname = "argo";
  public static final String NESSUNO_INDEFINITO = "'Nessuno/indefinito'";

  // alcuni database (ORACLE) hanno bisogno di convertire i nomi tabella in maiuscolo
  private boolean needUppercase = false;
  private boolean verbose = false;
  public boolean docker = false;
  public String dockerHost, dockerContext;

  public void init(ServletContext context, String contextPath)
     throws Exception
  {
    if(this.context == null)
    {
      this.context = context;
      this.contextPath = contextPath;
      realContextPath = context.getRealPath("/");

      // verifica se siamo in ambiente docker
      InetAddress[] allAdr = CommonNetUtils.getAllLocalAddress();
      for(int i = 0; i < allAdr.length; i++)
      {
        System.out.println("Address: " + allAdr[i].getHostAddress());

        byte[] addr = allAdr[i].getAddress();
        if(addr.length == 4 && addr[0] == ((byte) 172) && addr[1] == ((byte) 17))
        {
          docker = true;
          dockerHost = SU.okStr(System.getenv("DOCKERHOST"), "argo1");
          dockerContext = SU.okStr(System.getenv("ARGOCONTEXT"), "argo1");
          this.contextPath = "/" + dockerContext;

          // verifica se postgres è all'interno del contenitore oppure dobbiamo utilizzare l'istanza condivisa
          File etcPost = new File("/etc/postgresql");
          if(etcPost.isDirectory())
          {
            // postgres interno
            jdbcPath = "jdbc:postgresql:argo";
          }
          else
          {
            // istanza condivisa di postgres (all'esterno del contenitore)
            jdbcPath = "jdbc:postgresql://172.17.0.1/" + dockerContext;
          }

          System.out.println("DOCKER!! " + jdbcPath + " ctx:" + this.contextPath + " dir:" + realContextPath);
          break;
        }
      }

      fileLocaliDir = new File(realContextPath, "WEB-INF" + File.separator + "file-locali");
      sqlDir = new File(realContextPath, "WEB-INF" + File.separator + "conf" + File.separator + "sql");
      outProperties = new File(fileLocaliDir, "setup.properties");
      outRip = new File(fileLocaliDir, "ripristina.sh");
      outTorque = new File(fileLocaliDir, "Torque.properties");

      if(OsIdent.isWindows())
        oss = "WIN";
      else
        oss = "UNIX";
    }

    // legge file di configurazione
    if(outProperties.exists())
    {
      pm = new PropertyManager(outProperties, "UTF-8");
      profile = pm.getString("profile");
      oss = pm.getString("os");
      prod = pm.getString("prod");
    }

    if(outTorque.exists())
    {
      String[] found = CommonFileUtils.grep(outTorque, "UTF-8",
         Pattern.compile("^torque\\.defaults\\.connection\\."));

      for(int pos, i = 0; i < found.length; i++)
      {
        String s = found[i];

        if((pos = s.indexOf("url =")) != -1)
          jdbcPath = StringOper.okStr(s.substring(pos + 5));
        if((pos = s.indexOf("user =")) != -1)
          jdbcUser = StringOper.okStr(s.substring(pos + 6));
        if((pos = s.indexOf("password =")) != -1)
          jdbcPass = StringOper.okStr(s.substring(pos + 10));
      }
    }
  }

  public void salvaSetup(HttpServletRequest request)
     throws Exception
  {
    // crea la directory file-locali se non esiste
    fileLocaliDir.mkdirs();

    // scrive file di configurazione
    oss = StringOper.okStr(request.getParameter("os"));
    prod = StringOper.okStr(request.getParameter("prod"));

    Enumeration enNames = request.getParameterNames();
    while(enNames.hasMoreElements())
    {
      String name = enNames.nextElement().toString();
      if(name.startsWith("CK_"))
      {
        profile += "|" + name.substring(3);
      }
    }

    if(!profile.isEmpty())
      profile = profile.substring(1);

    pm.addString("os", oss);
    pm.addString("prod", prod);
    pm.addString("profile", profile);
    pm.save(outProperties, "UTF-8");

    // genera nuovo Torque.properties
    jdbcPath = StringOper.okStr(request.getParameter("jdbc"));
    jdbcUser = StringOper.okStr(request.getParameter("user"));
    jdbcPass = StringOper.okStr(request.getParameter("pass"));
    File inTorque = new File(realContextPath, "WEB-INF" + File.separator
       + "conf" + File.separator + "Torque.properties");

    if(inTorque.canRead())
    {
      String[] linee = CommonFileUtils.grep(inTorque, "UTF-8", null);
      for(int i = 0; i < linee.length; i++)
      {
        String s = linee[i];
        if(s.startsWith("torque.defaults.connection.url"))
        {
          linee[i] = "torque.defaults.connection.url = " + jdbcPath;
        }
        if(s.startsWith("torque.defaults.connection.user"))
        {
          linee[i] = "torque.defaults.connection.user = " + jdbcUser;
        }
        if(s.startsWith("torque.defaults.connection.password"))
        {
          linee[i] = "torque.defaults.connection.password = " + jdbcPass;
        }
      }

      CommonFileUtils.writeFileTxt(outTorque,
         StringOper.join(linee, '\n'), "UTF-8");
    }

    // genera nuovo ripristina.sh
    File inRip = new File(realContextPath, "WEB-INF" + File.separator
       + "conf" + File.separator + "components" + File.separator + "ripristina.sh");

    if(inRip.canRead())
    {
      String srip = CommonFileUtils.readFileTxt(inRip, "UTF-8");
      srip = StringOper.strReplace(srip, "\"argo\"", "\"" + contextPath + "\"");
      CommonFileUtils.writeFileTxt(outRip, srip, "UTF-8");
      CommonFileUtils.chmod(outRip, 0755);

      // esegue lo script ripristina.sh
      ExecHelper eh = ExecHelper.execUsingShell(realContextPath + "/WEB-INF/file-locali/ripristina.sh");
      ehStdout = eh.getOutput();
      ehStderr = eh.getError();
    }

    JdbcUrlSplitter us = new JdbcUrlSplitter(jdbcPath);
    if(us.database != null)
      dbname = us.database;

    if(profile.contains("RIS"))
      dboper += "|INR|IND";
    if(profile.contains("LIS"))
      dboper += "|INL|IND";
  }

  public void runPopolaDB(HttpServletRequest request, HttpServletResponse response, JspWriter out)
     throws Exception
  {
    dbname = StringOper.okStr(request.getParameter("dbname"));
    pwdpos = StringOper.okStr(request.getParameter("pwdpos"));

    dboper = "";
    Enumeration enNames = request.getParameterNames();
    while(enNames.hasMoreElements())
    {
      String name = enNames.nextElement().toString();
      if(name.startsWith("CKD_"))
      {
        dboper += "|" + name.substring(4);
      }
    }

    verbose = dboper.contains("MSG");
    needUppercase = dboper.contains("UPR");

    sdu = new SanityDatabaseUtils(needUppercase, verbose);

    if(dboper.contains("CUS"))
      creaUtenteDB(out);
    if(dboper.contains("CDB"))
      creaDatabaseDB(out);
    if(dboper.contains("STR"))
      popolaStruttura(out);

    if(dboper.contains("IND"))
      popolaBase(out);

    allineaVersion();
    salvaProprieta(out);
  }

  private void creaUtenteDB(JspWriter out)
     throws Exception
  {
    try (Connection con = openConnectionSU())
    {
      String sSQL = "CREATE ROLE " + jdbcUser
         + " PASSWORD '" + jdbcPass + "'"
         + " LOGIN SUPERUSER INHERIT CREATEDB NOCREATEROLE REPLICATION;";

      out.println(sSQL);
      con.createStatement().executeUpdate(sSQL);
      out.flush();
    }
  }

  private void creaDatabaseDB(JspWriter out)
     throws Exception
  {
    try (Connection con = openConnectionSU())
    {
      String sSQL = "CREATE DATABASE " + dbname
         + "  WITH OWNER =" + jdbcUser
         + "       ENCODING = 'UTF8'\n"
         + "       TABLESPACE = pg_default\n"
         + "       LC_COLLATE = 'it_IT.UTF-8'\n"
         + "       LC_CTYPE = 'it_IT.UTF-8'\n"
         + "       CONNECTION LIMIT = -1;\n"
         + "";

      out.println(sSQL);
      con.createStatement().executeUpdate(sSQL);
      out.flush();
    }
  }

  private void inserisciZero(JspWriter out)
     throws Exception
  {
    try (Connection con = openConnection())
    {
      sdu.inserisciZeroSQL(con, out);
      out.flush();
    }
  }

  private void popolaStruttura(JspWriter out)
     throws Exception
  {
    String[] fs =
    {
      "id-table-schema.sql", "turbine-schema.sql", "turbine-security.sql",
      "argo-pre.sql", "argo-schema.sql", "argo-extra.sql", "argo-view.sql",
      "sqlArgo.sql", "sqlTurbine.sql",
    };

    try (Connection con = openConnection())
    {
      for(int i = 0; i < fs.length; i++)
      {
        executeSqlScript(con, out, fs[i]);
        out.flush();
      }
    }

    out.println("=== INSERIMENTO valori '0' nelle tabelle ===");

    inserisciZero(out);
  }

  private void popolaBase(JspWriter out)
     throws Exception
  {
    File elenco = new File(sqlDir, "populate-list.txt");
    String[] lineeElenco = CommonFileUtils.grep(elenco, "UTF-8", null);

    try (Connection con = openConnection())
    {
      for(String linea : lineeElenco)
      {
        if((linea = SU.okStrNull(linea)) != null)
        {
          executeSqlScript(con, out, linea);
          out.flush();
        }
      }
    }
  }

  private static class StepHandler extends DefaultHandler
  {
    public int major = 0, minor = 0;

    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes)
       throws SAXException
    {
      if(SU.isEqu("step", localName))
      {
        int lMajor = SU.parse(attributes.getValue("major"), 0);
        int lMinor = SU.parse(attributes.getValue("minor"), 0);

        if(lMajor > major)
        {
          major = lMajor;
          minor = lMinor;
        }
        else if(lMinor > minor)
          minor = lMinor;
      }
    }
  }

  private void allineaVersion()
     throws Exception
  {
    File pilot = new File(sqlDir, "updpilot.xml");
    try (Connection con = openConnection(); FileInputStream fis = new FileInputStream(pilot))
    {
      StepHandler sh = new StepHandler();
      SAXParserFactory spf = SAXParserFactory.newInstance();
      spf.setValidating(false);
      spf.setNamespaceAware(true);
      SAXParser saxParser = spf.newSAXParser();
      XMLReader xmlReader = saxParser.getXMLReader();
      xmlReader.setContentHandler(sh);
      xmlReader.parse(new InputSource(fis));

      // salva i massimi e minimi trovati nella tabella version
      String sSQL = "INSERT INTO gen.version(\n"
         + "            componente, major, minor, stato_oper)\n"
         + "    VALUES (?, ?, ?, ?);";
      try (PreparedStatement ps = con.prepareStatement(sSQL))
      {
        ps.setString(1, "argo");
        ps.setInt(2, sh.major);
        ps.setInt(3, sh.minor);
        ps.setString(4, "0");
        ps.executeUpdate();
      }
    }
  }

  public Connection openConnection()
     throws Exception
  {
    Class.forName("org.postgresql.Driver");
    return DriverManager.getConnection(jdbcPath, jdbcUser, jdbcPass);
  }

  public Connection openConnectionSU()
     throws Exception
  {
    String uri = jdbcPath.replace(dbname, "template1");
    Class.forName("org.postgresql.Driver");
    return DriverManager.getConnection(uri, "postgres", pwdpos);
  }

  private void executeSqlScript(Connection con, JspWriter out, String fileExec)
     throws Exception
  {
    File toRun = new File(sqlDir, fileExec);
    sdu.executeSqlScript(con, out, toRun);
    out.flush();
  }

  private boolean insertProperties(Connection con, JspWriter out, String key, String value)
     throws Exception
  {
    try
    {
      String sSQL = "INSERT INTO GEN.SETUP_OVERRIDE(nome, valore)\n"
         + "    VALUES (?, ?);";

      try (PreparedStatement ps = con.prepareStatement(sSQL))
      {
        ps.setString(1, key);
        ps.setString(2, value);
        ps.executeUpdate();
      }

      return true;
    }
    catch(Exception ex)
    {
      ex.printStackTrace();
      out.print("ERROR: " + ex.getMessage() + "\n");
      return false;
    }
  }

  private void salvaProprieta(JspWriter out)
     throws Exception
  {
    try (Connection con = openConnection())
    {
//      if(prod.contains("CBI"))
//      {
//        executeSqlScript(con, out, "poseidone/properties-poseidone.sql");
//        insertProperties(con, out, "tool.ui.skin", "caleido");
//      }
//
//      if(prod.contains("POS"))
//      {
//        executeSqlScript(con, out, "poseidone/properties-poseidone.sql");
//        insertProperties(con, out, "tool.ui.skin", "poseidone");
//      }

      insertProperties(con, out, "serverdata.default.contextPath", contextPath.substring(1));
    }
  }

  public String testChecked(String prop, String test)
  {
    return prop.contains(test) ? "checked" : "";
  }

  public String testProfile(String test)
  {
    return profile.contains(test) ? "checked" : "";
  }

  public String testOss(String test)
  {
    return oss.contains(test) ? "checked" : "";
  }

  public String testProd(String test)
  {
    return prod.contains(test) ? "checked" : "";
  }

  public String testOdb(String test)
  {
    return dboper.contains(test) ? "checked" : "";
  }
}
