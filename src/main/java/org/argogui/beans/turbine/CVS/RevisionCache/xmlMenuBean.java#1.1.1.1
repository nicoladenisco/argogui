/* 
 *  Copyright (C) 2016 RAD-IMAGE s.r.l.
 * 
 *  Questo software è proprietà di RAD-IMAGE s.r.l.
 *  Tutti gli usi non esplicitimante autorizzati sono da 
 *  considerarsi tutelati ai sensi di legge.
 * 
 *  RAD-IMAGE s.r.l.
 *  Via San Giovanni, 1 - Contrada Belvedere
 *  San Nicola Manfredi (BN)
 * 
 *  Creato il 10 Febbraio 2016, 19:06:00
 */
package it.radimage.argo.beans.turbine;

import java.io.File;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.turbine.util.RunData;
import org.commonlib.utils.ClassOper;
import org.jdom2.*;
import org.jdom2.input.SAXBuilder;
import it.radimage.argo.Costanti;
import it.radimage.argo.services.security.SEC;
import it.radimage.argo.beans.menu.MenuGenerator;
import it.radimage.argo.om.bean.GenListproBean;
import it.radimage.argo.services.SERVICE;
import it.radimage.argo.utils.SU;
import it.radimage.argo.utils.TR;
import it.radimage.argo.utils.tree.ArgoMenuTreeNode;

/**
 * Nuova gestione del menù principale su file XML.
 *
 * FILENOI18N
 * @author Nicola De Nisco
 */
public class xmlMenuBean extends menuBean
{
  /** Logging */
  private static Log log = LogFactory.getLog(xmlMenuBean.class);
  private Document doc = null;

  /**
   * Nuova versione con lettura del file XML.
   * Il menu viene gestito con un file XML invece
   * che con una tabella di database come nella
   * versione precedente.
   * @param data oggetto RunData al momento dell'invocazione
   * @throws Exception
   */
  @Override
  public void costruisciAlbero(RunData data) throws Exception
  {
    if(doc == null)
      doc = buildDocument();

    Element el = doc.getRootElement();
    padre = new ArgoMenuTreeNode(new GenListproBean());
    cercaFigli(data, 0, el, padre);
  }

  public void cercaFigli(RunData data, int livello, Element elPadre, ArgoMenuTreeNode node)
     throws Exception
  {
    node.setEnabled(true);
    String permission = node.getMenuItem().getPermission();

    // controllo permessi
    if(SU.isOkStr(permission))
    {
      if(!SEC.checkAnyPermission(data, permission))
        node.setEnabled(false);
    }

    node.removeChild();
    if(livello >= Costanti.MAX_LIVELLI_MENU)
      return;

    List<Element> lsFigli = elPadre.getChildren("menu");
    for(Element el : lsFigli)
    {
      GenListproBean b = new GenListproBean();
      b.setDescrizione(el.getAttributeValue("descrizione"));
      b.setProgramma(el.getAttributeValue("programma"));
      b.setImmagine(el.getAttributeValue("immagine"));
      b.setColore(el.getAttributeValue("colore"));
      b.setTipo(el.getAttributeValue("tipo"));
      b.setFlag1(el.getAttributeValue("flag1"));
      b.setFlag2(el.getAttributeValue("flag2"));
      b.setPermission(el.getAttributeValue("permission"));
      b.setNote(el.getAttributeValue("note"));

      ArgoMenuTreeNode child = new ArgoMenuTreeNode(b);
      node.addChild(child);
      cercaFigli(data, livello + 1, el, child);

      String submenugen = el.getAttributeValue("submenugen");
      if(SU.isOkStr(submenugen))
        creaSottoMenu(submenugen, data, livello + 1, el, child);
    }
  }

  public Document buildDocument()
     throws Exception
  {
    String sFileMenu = TR.getString("menu.file", "menu.xml");
    File fxml = SERVICE.getConfMainFile(sFileMenu);

    log.info("Leggo " + fxml.getAbsolutePath());
    SAXBuilder builder = new SAXBuilder();
    return builder.build(fxml);
  }

  public void creaSottoMenu(String submenugen, RunData data, int livello,
     Element elPadre, ArgoMenuTreeNode node)
     throws Exception
  {
    Class subGenClass = ClassOper.loadClass(submenugen,
       ClassOper.getClassPackage(MenuGenerator.class), null);
    MenuGenerator mg = (MenuGenerator) subGenClass.newInstance();

    // aggiunge il menu del plugin
    mg.creaSottoMenu(submenugen, data, livello, elPadre, node);
  }
}
